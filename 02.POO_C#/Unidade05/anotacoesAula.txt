Tratamento de exceção
    try
    {
       // blocos de código que PODEM disparar uma exceção
    }
        // podemos ter um catch por tipo de erro se quisermos
    catch (ArgumentException ex)
    {
        // tratamento caso ocorra exceção do tipo ArgumentException (exwmplo)
    }
    catch (Exception ex) {
        // tratamento caso ocorra qualquer outro tipo de exceção
    }
    finally {
        // executado, ocorrendo uma exceção ou não
    }


//programação assíncrona em OUTRAS LINGUAGENS //pseudocódigo
    void minhaFuncao(){
        ConsumirServicoExterno().onComplete(minhaFuncaoComplete).onError(minhaFuncaoError);
        // executar alguma outra tarefa enquanto isto.
    }

    void minhaFuncaoComplete(){
        // executa algo após o término da função de processo lento
    }

    void minhaFuncaoError(){
        // executa se houver algum erro no proceso lento
    }

//programação assíncrona em C# - async/await
        //método assíncrono:
        public async void Assincrono() {
            // a variavel fica aguardando (await) pelo retorno de outro metódo
            var tamanho = await AcessaWebAssinc();
            Console.WriteLine("Tamanho da página: {0}", tamanho);
        }

        //retorno que precisa ser aguardado do tipo int (Taks<int>)
        public async Task<int> AcessaWebAssinc() {

            HttpClient client = new HttpClient();

            Task<string> retorno = client.GetStringAsync("http://msdn.microsoft.com");

            // com o uso se await o runtime sabe que precisa esperar esta tarefa ser concluída
            string resultado = await retorno;

            return resultado.Length;
        }